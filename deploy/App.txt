<!DOCTYPE html>
<html>
<head>
    <title>Portfolio Drilldown Report</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sat Mar 28 2015 19:45:40 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sat Mar 28 2015 19:45:40 GMT-0600 (MDT)";
        var CHECKSUM = 4916480510;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.data.wsapi.TreeStoreBuilder, {
        _setupTreeModel: function(models, config) {
            var modelsToLoad = [];
            var allTypes = _.pluck(models, 'typePath');

            //Only want specific parent types
            var parentTypes = config.parentTypes;  //_.filter(allTypes, config.mapper.isParentType, config.mapper);

            config.enableHierarchy = config.enableHierarchy && parentTypes.length > 0;

            if(config.enableHierarchy) {
                config.parentTypes = parentTypes;
                modelsToLoad = this._getChildModelsToLoad(config);
            } else {
                config.parentTypes = allTypes;
            }

            if (modelsToLoad.length > 0) {
                return this._loadChildModels(modelsToLoad, models, config);
            }

            return Deft.Promise.when(models);
        }
    });

Ext.override(Rally.data.wsapi.TreeStore, {
    _getChildNodeFilters: function(node) {
        var parentType = node.self.typePath,
            childTypes = this._getChildTypePaths([parentType]),
            parentFieldNames = this._getParentFieldNames(childTypes, parentType);
        console.log('_getChildNodeFilters',node, parentType, childTypes,parentFieldNames, this.childFilters);

        if (parentFieldNames.length) {
            var filters =  Rally.data.wsapi.Filter.or(_.map(parentFieldNames, function(parentFieldName) {
                return {
                    property: parentFieldName,
                    operator: '=',
                    value: node.get('_ref')
                };
            }));
            if (this.childFilters && this.childFilters[parentType]){
                console.log(filters.and(this.childFilters[parentType]).toString());
                return [filters.and(this.childFilters[parentType])];
            }
            return [filters];
        }
        return [];
    },
    filterChildren: function(childFilterObjects){
        //need to make sure that the fields are on the types
        this.childFilters = childFilterObjects;
        console.log(this.childFilters);
        this.load();
    }
});


Ext.override(Rally.ui.grid.plugin.TreeGridChildPager, {
    _storeHasMoreChildPages: function(parentRecord) {
        var loadedCount = this._getLoadedCount(parentRecord);
        var childPageSize = this.cmp.getStore().getChildPageSize(parentRecord);
        console.log('_storeHasMoreChildPages', loadedCount, parentRecord.get('leafCount'));
        return parentRecord.get('leafCount') > loadedCount && loadedCount >= childPageSize;
    }
});
Ext.define("portfolio-drilldown-report", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'criteria_box', layout: {type: 'hbox'}},
        {xtype:'container',itemId:'display_box'},
        {xtype:'tsinfolink'}
    ],
    portfolioItemTypes: ['PortfolioItem/Feature','PortfolioItem/Initiative'],
    launch: function() {

        this.down('#criteria_box').add({
            itemId: 'cb-release',
            xtype: 'rallyreleasecombobox',
            listeners: {
                change: this._onReleaseChanged,
                scope: this
            }
        });

        this.down('#criteria_box').add({
            xtype: 'rallybutton',
            text: 'Portfolio Items...',
            listeners: {
                scope: this,
                click: this._launchChooser
            }
        });
    },
    _onReleaseChanged: function(cb){
        var grid = this.down('rallygridboard');
        if (grid){
            var filters = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Release.Name',
                value: cb.getRecord().get('Name')
            });

            var filterObj = {};
            filterObj[this.portfolioItemTypes[1].toLowerCase()] = filters;
            console.log(grid.getGridOrBoard());
            grid.getGridOrBoard().store.filterChildren(filterObj);
        }
    },
    _launchChooser: function(){
        Ext.create('Rally.ui.dialog.ArtifactChooserDialog', {
            artifactTypes: this.portfolioItemTypes[1],
            autoShow: true,
            height: 250,
            title: 'Choose PortfolioItem',
            listeners: {
                artifactchosen: function(dialog, selectedRecord){
                    this.selectedPortfolioItem = selectedRecord;
                    this._runReport();
                },
                scope: this
            }
        });
    },
    _runReport: function(){
        var rootItem = this.selectedPortfolioItem;
        this.logger.log('_runReport', rootItem);
        var releaseName = this.down('#cb-release').getRecord().get('Name');

        //determine if this is the detailed or summary view

        //load child artifacts
        var filters = [{
            property: 'ObjectID',
            value: rootItem.get('ObjectID')
        }];

        var childFilterHash = {};
        childFilterHash[this.portfolioItemTypes[1].toLowerCase()] = Ext.create('Rally.data.wsapi.Filter', {property: 'Release.Name', value:releaseName});

        var columnModels = [this.portfolioItemTypes[1],this.portfolioItemTypes[0],'HierarchicalRequirement','Task'];
        var context = this.getContext();
        console.log('childFilterHash', childFilterHash);
        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: [this.portfolioItemTypes[1],this.portfolioItemTypes[0]],
            autoLoad: true,
            enableHierarchy: true,
            parentTypes: [this.portfolioItemTypes[1]],
            //childFilters: childFilterHash,
            filters: filters
        }).then({
            scope: this,
            success: function(store) {
                console.log('storeloaded');
                this.down('#display_box').add({
                        xtype: 'rallygridboard',
                        context: this.getContext(),
                        modelNames: [this.portfolioItemTypes[1],this.portfolioItemTypes[0]],
                        toggleState: 'grid',
                        plugins: [
                            {
                                ptype: 'rallygridboardfieldpicker',
                                headerPosition: 'left',
                                modelNames: columnModels,
                                stateful: true,
                                stateId: context.getScopedStateId('columns-example')
                            },
                            {
                                ptype: 'rallygridboardactionsmenu',
                                menuItems: [
                                    {
                                        text: 'Export Summary...',
                                        handler: function() {
                                            window.location = Rally.technicalservices.buildCsvExportUrl(
                                                this.down('rallygridboard').getGridOrBoard());
                                        },
                                        scope: this
                                    },
                                    {
                                        text: 'Export Details...',
                                        handler: function() {
                                            console.log('Export Details...');
                                        },
                                        scope: this
                                    }
                                ],
                                buttonConfig: {
                                    iconCls: 'icon-export'
                                }
                            }


                        ],
                        cardBoardConfig: {
                            attribute: 'ScheduleState'
                        },
                        gridConfig: {
                            store: store,
                            columnCfgs: [
                                'Name'

                            ]
                        },
                        height: this.getHeight()
                    });            }
        });
    },
    _getReleaseFilters: function(){
        var release_name = this.down('#cb-release').getRecord().get('Name');

        Ext.create('Rally.data.wsapi.Store',{
            model: 'Release',
            filters: [{
                property: 'Name',
                value: release_name
            }],
            fetch: ['_ref'],
            autoLoad: true,
            listeners: {
                scope: this,
                load: this._onReleasesLoaded
            }
        });
        console.log(release_name);
    },
    _onReleasesLoaded: function(store, records, success){
        if (success){
            var treeFilters = _.map(records, function(r){
                return {property: 'Release', value: r.get('_ref')};
            });
            treeFilters = Rally.data.wsapi.Filter.or(treeFilters);
            this._displayGrid(treeFilters);
        } else {
            Rally.ui.notify.Notifier.showError({message: "Unable to load releases"});
        }
    },
    _displayGrid: function(treeFilters){
        var models = ['PortfolioItem/Initiative'];
        var filterModels = ['PortfolioItem/Initiative','PortfolioItem/Feature'];
        var context = this.getContext();

        if (this.down('rallygridboard')){
            this.down('rallygridboard').remove();
        }

        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: models,
            enableHierarchy: true,
            parentTypes: models
        }).then({
            scope: this,
            success: function(store) {
              //  store.filterBy(treeFilters);
                console.log(store);
                var grid = Ext.create('Ext.Container', {
                    items: [{
                        xtype: 'rallygridboard',
                        context: context,
                       // modelNames: models,
                        toggleState: 'grid',
                        plugins: [
                            {
                                ptype: 'rallygridboardfieldpicker',
                                headerPosition: 'left',
                                modelNames: models,
                                stateful: true,
                                stateId: context.getScopedStateId('columns-example')
                            },
                            {
                                ptype: 'rallygridboardactionsmenu',
                                menuItems: [
                                    {
                                        text: 'Export...',
                                        handler: function() {
                                            window.location = Rally.ui.grid.GridCsvExport.buildCsvExportUrl(
                                                this.down('rallygridboard').getGridOrBoard());
                                        },
                                        scope: this
                                    }
                                ],
                                buttonConfig: {
                                    iconCls: 'icon-export'
                                }
                            },
                            {
                                ptype: 'rallygridboardcustomfiltercontrol',
                                filterControlConfig: {
                                    modelNames: filterModels,
                                    stateful: true,
                                    stateId: context.getScopedStateId('custom-filter-example')
                                },
                                showOwnerFilter: false
                            }
                        ],
                        cardBoardConfig: {
                            attribute: 'ScheduleState'
                        },
                        gridConfig: {
                            store: store,
                            columnCfgs: [
                                'Name'
                            ]
                        },
                        height: this.getHeight()
                    }]
                });

                this.down('#display_box').add(grid);
            }
        });    }
});

            
               Rally.launchApp('portfolio-drilldown-report', {
                   name: 'Portfolio Drilldown Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>